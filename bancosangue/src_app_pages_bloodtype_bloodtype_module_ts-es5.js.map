{"version":3,"mappings":"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","names":["routes","path","component","_bloodtype_component__WEBPACK_IMPORTED_MODULE_0__","BloodtypeRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_2__","imports","exports","routedComponents","_angular_core__WEBPACK_IMPORTED_MODULE_1__","BloodtypeComponent","domainService","formBuilder","ng2_smart_table__WEBPACK_IMPORTED_MODULE_2__","noDataMessage","add","addButtonContent","createButtonContent","cancelButtonContent","confirmCreate","edit","editButtonContent","saveButtonContent","confirmSave","deleteButtonContent","confirmDelete","columns","domain","title","type","dmName","dmCode","getBySelfId","loadForms","searchForm","group","search","viewModelObject","searchGroup","get","value","subscribe","data","domainSelfId","details","loadingList","getByDomain","convertFormToModel","source","load","domainName","event","newData","dmOrder","selfId","create","confirm","resolve","idDomain","selectors","decls","vars","consts","template","ctx","BloodtypeModule","_service_employee_employeeService__WEBPACK_IMPORTED_MODULE_1__","_nebular_theme__WEBPACK_IMPORTED_MODULE_5__","_theme_theme_module__WEBPACK_IMPORTED_MODULE_0__","ng2_smart_table__WEBPACK_IMPORTED_MODULE_6__","_bloodtype_routing_module__WEBPACK_IMPORTED_MODULE_2__","_angular_forms__WEBPACK_IMPORTED_MODULE_7__","declarations","DomainService","http","headers","_angular_common_http__WEBPACK_IMPORTED_MODULE_1__","url","httpOptions","dModel","set","queryDomain","append","options","params","querySelfId","post","id","put","_defaultService__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_2__","factory","providedIn"],"sources":["webpack:///src/app/pages/bloodtype/bloodtype-routing.module.ts","webpack:///src/app/pages/bloodtype/bloodtype.component.html","webpack:///src/app/pages/bloodtype/bloodtype.component.ts","webpack:///src/app/pages/bloodtype/bloodtype.module.ts","webpack:///src/app/service/domain/domainService.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BloodtypeComponent } from './bloodtype.component';\r\n\r\n\r\n\r\n\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: BloodtypeComponent,\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class BloodtypeRoutingModule { }\r\n\r\nexport const routedComponents = [\r\n  BloodtypeComponent,\r\n];\r\n","<nb-card>\r\n  <form [formGroup]=\"searchForm\" (ngSubmit)=\"onSearchFormSubmit()\">\r\n    <nb-card formGroupName=\"search\" nbSpinnerStatus=\"info\" nbSpinnerSize=\"small\" accent=\"primary\">\r\n      <nb-card-header>Pesquisa:</nb-card-header>\r\n      <nb-card-body>\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-4\">\r\n            <div class=\"form-group\">\r\n              <label for=\"domain\">Dom√≠nio</label>\r\n              <select class=\"form-control\" formControlName=\"domain\">\r\n                <option *ngFor=\"let item of domainSelfId\">\r\n                {{ item.domain }}\r\n                </option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nb-card-body>\r\n      <nb-card-footer>\r\n        <button nbButton size=\"small\" status=\"danger\" type=\"button\" class=\"mt-3 mr-2\"\r\n          (click)=\"clearSearchForm()\">Limpar</button>\r\n        <button nbButton size=\"small\" status=\"primary\" type=\"submit\" class=\"mt-3 mr-2\"\r\n          (click)=\"onSearchFormSubmit()\">Pesquisar</button>\r\n      </nb-card-footer>\r\n    </nb-card>\r\n  </form>\r\n\r\n</nb-card>\r\n\r\n\r\n<nb-card accent=\"primary\" [nbSpinner]=\"loadingList\">\r\n  <nb-card-body>\r\n    <ng2-smart-table\r\n    [settings]=\"settings\"\r\n    [source]=\"source\"\r\n    (createConfirm)=\"onAdd($event)\"\r\n    (editConfirm)=\"onEdit($event)\"\r\n    (deleteConfirm)=\"onDelete($event)\">\r\n    </ng2-smart-table>\r\n  </nb-card-body>\r\n  <nb-card-footer></nb-card-footer>\r\n</nb-card>\r\n","import { DomainModel } from \"./../../models/response/domainModel\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\r\nimport { LocalDataSource } from \"ng2-smart-table\";\r\nimport { DomainService } from \"../../service/domain/domainService\";\r\n\r\n@Component({\r\n  selector: \"ngx-person\",\r\n  templateUrl: \"./bloodtype.component.html\",\r\n  styleUrls: [\"./bloodtype.component.scss\"],\r\n})\r\nexport class BloodtypeComponent implements OnInit {\r\n  source: LocalDataSource = new LocalDataSource();\r\n  loadingList: boolean = false;\r\n  searchForm: FormGroup;\r\n  domainName: any;\r\n  domainSelfId: DomainModel[];\r\n\r\n  constructor(\r\n    private domainService: DomainService,\r\n    private formBuilder: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getBySelfId();\r\n    this.loadForms();\r\n  }\r\n\r\n  loadForms() {\r\n    this.searchForm = this.formBuilder.group({\r\n      search: this.formBuilder.group({\r\n        domain: [\"\"],\r\n      }),\r\n    });\r\n  }\r\n\r\n  convertFormToModel() {\r\n    var viewModelObject = <DomainModel>{\r\n      domain: this.searchGroup.get(\"domain\").value,\r\n    };\r\n    return viewModelObject;\r\n  }\r\n\r\n  clearSearchForm() {}\r\n\r\n  public get searchGroup(): FormGroup {\r\n    return this.searchForm.get(\"search\") as FormGroup;\r\n  }\r\n  /////    SMART TABLE     //////////\r\n\r\n  settings = {\r\n    noDataMessage: \"Sem Dados\",\r\n    //mode: 'external',\r\n    //actions: { columnTitle: 'A√ß√µes', add: true },\r\n    add: {\r\n      addButtonContent: '<i class=\"nb-plus\"></i>',\r\n      createButtonContent: '<i class=\"nb-checkmark\"></i>',\r\n      cancelButtonContent: '<i class=\"nb-close\"></i>',\r\n      confirmCreate: true,\r\n    },\r\n    edit: {\r\n      editButtonContent: '<i class=\"nb-edit\"></i>',\r\n      saveButtonContent: '<i class=\"nb-checkmark\"></i>',\r\n      cancelButtonContent: '<i class=\"nb-close\"></i>',\r\n      confirmSave: true,\r\n    },\r\n    delete: {\r\n      deleteButtonContent: '<i class=\"nb-trash\"></i>',\r\n      confirmDelete: true,\r\n    },\r\n    columns: {\r\n      domain: { title: \"Dominio\",type: \"string\",\r\n                /* editor: {\r\n                  type: \"list\",\r\n                  config: { list: [] },\r\n                }, */\r\n      },\r\n      dmName: {title: \"Descri√ß√£o\", type: \"string\",},\r\n      dmCode: {title: \"Cod.\",type: \"string\",},\r\n    },\r\n  };\r\n  /******** GET  *************** */\r\n  private getBySelfId() {\r\n    this.domainService.getBySelfId(\"\").subscribe((data) => {\r\n      this.domainSelfId = data.details;\r\n      /* for (const i of this.domainSelfId) {\r\n        this.settings.columns.domain.editor.config.list.push({\r\n          value: i.domain,\r\n          title: i.domain,\r\n        });\r\n        this.settings = Object.assign({}, this.settings);\r\n      } */\r\n    });\r\n  }\r\n\r\n  onSearchFormSubmit() {\r\n    this.loadingList = true;\r\n    this.domainService\r\n      .getByDomain(this.convertFormToModel())\r\n      .subscribe((data: any) => {\r\n        this.source.load(data.details);\r\n      });\r\n    this.loadingList = false;\r\n  }\r\n\r\n  private getDomain() {\r\n    this.domainService.get().subscribe((data) => {\r\n      this.domainName = data.details;\r\n      this.source.load(data.details);\r\n    });\r\n  }\r\n\r\n  /******** ADD  *************** */\r\n  onAdd(event) {\r\n    const domain = <DomainModel>{\r\n      domain: event.newData.domain,\r\n      dmName: event.newData.dmName,\r\n      dmCode: event.newData.dmCode,\r\n      dmOrder:event.newData.dmOrder,\r\n      selfId: event.newData.selfId,\r\n    };\r\n\r\n    this.domainService.create(domain).subscribe(\r\n      (data) => {\r\n      this.domainService\r\n        .getByDomain(event.newData.domain)\r\n        .subscribe((data: any) => {\r\n          this.source.load(data.details);\r\n        });\r\n        event.confirm.resolve();\r\n    });\r\n  }\r\n\r\n  /************** Edit ***********/\r\n\r\n  onEdit(event) {\r\n    const domain = <DomainModel>{\r\n      domain: event.newData.domain,\r\n      dmName: event.newData.dmName,\r\n      dmCode: event.newData.dmCode,\r\n      dmOrder:event.newData.dmOrder,\r\n      selfId: event.newData.selfId,\r\n    };\r\n\r\n    this.domainService.edit(event.newData.idDomain, domain).subscribe(\r\n      (data)=>{\r\n        event.confirm.resolve();\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  onDelete(event) {}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NbButtonModule, NbCardModule, NbSpinnerModule} from '@nebular/theme';\r\nimport { Ng2SmartTableModule } from 'ng2-smart-table';\r\nimport { ThemeModule } from '../../@theme/theme.module';\r\nimport { EmployeeService } from '../../service/employee/employeeService';\r\nimport { BloodtypeRoutingModule, routedComponents } from './bloodtype-routing.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NbCardModule,\r\n    NbButtonModule,\r\n    ThemeModule,\r\n    Ng2SmartTableModule,\r\n    BloodtypeRoutingModule,\r\n    NbSpinnerModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n  ],\r\n  declarations: [\r\n    ...routedComponents,\r\n  ],\r\n  exports: [],\r\n  entryComponents:[],\r\n  providers: [EmployeeService],\r\n})\r\nexport class BloodtypeModule { }\r\n","import { DomainModel } from './../../models/response/domainModel';\r\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { DefaultService } from \"../defaultService\";\r\nimport { ApiResponse } from \"../../models/apiResponse\";\r\nimport { SearchPerson } from \"../../models/request/searchPerson\";\r\nimport { Observable } from \"rxjs\";\r\nimport { PersonModel } from \"../../models/response/personModel\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class DomainService extends DefaultService {\r\n\r\n    constructor(private http: HttpClient) {\r\n     super('domain/')\r\n    }\r\n\r\n    private httpOptions ={\r\n      headers: new HttpHeaders({\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Basic bmFudTpuYW51'\r\n      })\r\n    };\r\n\r\n    get():Observable<ApiResponse<DomainModel>> {\r\n      return this.http.get<ApiResponse<DomainModel>>(`${this.url}`, this.httpOptions);\r\n    }\r\n\r\n    getByDomain(dModel:DomainModel):Observable<ApiResponse<DomainModel>> {\r\n      const headers = new HttpHeaders().set('Authorization','Basic bmFudTpuYW51');\r\n      let queryDomain = new HttpParams().append(\"domain\",dModel.domain)\r\n      const options = {  params: queryDomain, headers: headers }\r\n      return this.http.get<ApiResponse<DomainModel>>(`${this.url}getByDomain`, options);\r\n    }\r\n\r\n    getBySelfId(selfId:string):Observable<ApiResponse<DomainModel>> {\r\n      const headers = new HttpHeaders().set('Authorization','Basic bmFudTpuYW51');\r\n      let querySelfId = new HttpParams().append(\"selfId\",selfId)\r\n      const options = {  params: querySelfId, headers: headers }\r\n      return this.http.get<ApiResponse<DomainModel>>(`${this.url}getBySelfId`, options);\r\n    }\r\n\r\n    create(domain: DomainModel): Observable<ApiResponse<DomainModel>> {\r\n      return this.http.post<ApiResponse<DomainModel>>(`${this.url}`,domain, this.httpOptions);\r\n    }\r\n\r\n    delete(id: string): Observable<ApiResponse<DomainModel>> {\r\n      return this.http.delete<ApiResponse<DomainModel>>(`${this.url}/${id}`);\r\n    }\r\n\r\n    edit(id: String,domain: DomainModel): Observable<ApiResponse<DomainModel>> {\r\n      return this.http.put<ApiResponse<DomainModel>>(`${this.url}${id}`, domain, this.httpOptions);\r\n    }\r\n\r\n\r\n   /* findById(id: String): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.get<ApiResponse<PersonModel>>(`${this.url}${id}`, this.httpOptions);\r\n    }\r\n\r\n    edit(id: String,person: PersonModel): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.put<ApiResponse<PersonModel>>(`${this.url}${id}`, person, this.httpOptions);\r\n    }\r\n\r\n    /* edit(person: PersonModel): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.put<ApiResponse<PersonModel>>(`${this.url}${person.id}`, person, this.httpOptions);\r\n    }\r\n\r\n    create(person: PersonModel): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.post<ApiResponse<PersonModel>>(`${this.url}`, person, this.httpOptions);\r\n    }\r\n\r\n\r\n    delete(id: string): Observable<ResponseApp<Employee>> {\r\n      return this.http.delete<ResponseApp<Employee>>(`${this.url}/${id}`);\r\n    }*/\r\n\r\n  }\r\n"]}