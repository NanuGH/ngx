{"version":3,"mappings":"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","names":["BloodCollectService","http","headers","_angular_common_http__WEBPACK_IMPORTED_MODULE_1__","searchBloodCollect","headerss","set","queryParams","append","collectionNumber","insertionDate","queryJustCollectionNumber","queryJustInsertionDate","options","params","get","url","id","httpOptions","put","person","idEmpl","idDonner","post","collection","idCollection","colletNumber","_defaultService__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_2__","factory","providedIn","BloodTestService","searchTest","sampleNumber","testModel","idEmp","idSample","DefaultService","resource","_environments_environment__WEBPACK_IMPORTED_MODULE_0__","EmployeeService","Authorization","searchEmployee","identifNumber","email","queryJustIdentifNumber","queryJustEmail","employee","PersonService","searchPerson","namePerson","surnamePerson","birthday","queryJustName","queryJustSurname","queryJustBirthDay","value","SampleService","searchSample","sample","idCollect","type"],"sources":["webpack:///src/app/service/blood-collection.ts/BloodCollectService.ts","webpack:///src/app/service/bloodTest/BloodTestService.ts","webpack:///src/app/service/defaultService.ts","webpack:///src/app/service/employee/employeeService.ts","webpack:///src/app/service/person/personService.ts","webpack:///src/app/service/sample/SampleService.ts"],"sourcesContent":["import { BloodCollectModule } from './../../pages/blood-collection/bloodCollect.module';\r\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { DefaultService } from \"../defaultService\";\r\nimport { ApiResponse } from \"../../models/apiResponse\"\r\nimport { SearchBloodCollect } from '../../models/request/searchbloodCollect';\r\nimport { Observable } from 'rxjs';\r\nimport { BloodCollection } from '../../models/request/bloodCollection';\r\nimport { BloodCollectModel } from '../../models/response/BloodCollectModel';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class BloodCollectService extends DefaultService {\r\n\r\n    constructor(private http: HttpClient) {\r\n     super('bloodcollection/')\r\n    }\r\n\r\n    private httpOptions ={\r\n      headers: new HttpHeaders({\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Basic bmFudTpuYW51'\r\n      })\r\n    };\r\n\r\n\r\n    getBloodColectMultParams(searchBloodCollect: SearchBloodCollect): Observable<ApiResponse<BloodCollectModule>> {\r\n      const headerss = new HttpHeaders().set(\"Authorization\",\"Basic bmFudTpuYW51\" );\r\n\r\n      let queryParams = new HttpParams().append(\"collectionNumber\", searchBloodCollect.collectionNumber)\r\n                                        .append(\"insertionDate\", searchBloodCollect.insertionDate);\r\n\r\n      let queryJustCollectionNumber = new HttpParams().append(\"collectionNumber\",searchBloodCollect.collectionNumber);\r\n\r\n      let queryJustInsertionDate = new HttpParams().append(\"insertionDate\", searchBloodCollect.insertionDate);\r\n\r\n      if (searchBloodCollect.collectionNumber != null && searchBloodCollect.insertionDate == null) {\r\n        const options = { params: queryJustCollectionNumber, headers: headerss };\r\n        return this.http.get<ApiResponse<BloodCollectModule>>(`${this.url}getBloodCollectionpts`, options);\r\n      }\r\n      if ( searchBloodCollect.collectionNumber != null && searchBloodCollect.insertionDate != null) {\r\n        const options = { params: queryParams, headers: headerss };\r\n        return this.http.get<ApiResponse<BloodCollectModule>>(`${this.url}getBloodCollectionpts`,options);\r\n      }\r\n      if (searchBloodCollect.collectionNumber == null && searchBloodCollect.insertionDate != null) {\r\n        const options = { params: queryJustInsertionDate, headers: headerss };\r\n        return this.http.get<ApiResponse<BloodCollectModule>>(`${this.url}getBloodCollectionpts`,options);\r\n      }\r\n    }\r\n\r\n    findById(id: String): Observable<ApiResponse<BloodCollectModule>> {\r\n      return this.http.get<ApiResponse<BloodCollectModule>>(`${this.url}${id}`, this.httpOptions);\r\n    }\r\n\r\n    changeStatus(id: string): Observable<ApiResponse<BloodCollectModule>> {\r\n      return this.http.put<ApiResponse<BloodCollectModule>>(`${this.url}changestatus/${id}`, null, this.httpOptions);\r\n    }\r\n\r\n    create(person: BloodCollection,idEmpl:string,idDonner:string): Observable<ApiResponse<BloodCollection>> {\r\n      return this.http.post<ApiResponse<BloodCollection>>(`${this.url}${idEmpl}/${idDonner}`, person, this.httpOptions);\r\n    }\r\n\r\n    edit(collection: BloodCollectModel,idCollection:string,idEmpl:string): Observable<ApiResponse<BloodCollectModel>> {\r\n      return this.http.put<ApiResponse<BloodCollectModel>>(`${this.url}\r\n      ${idCollection}/${idEmpl}`, collection, this.httpOptions);\r\n    }\r\n\r\n    findByCollectionNumber(colletNumber: String): Observable<ApiResponse<BloodCollectModel>> {\r\n      return this.http.get<ApiResponse<BloodCollectModel>>(`${this.url}collection/${colletNumber}`, this.httpOptions);\r\n    }\r\n\r\n  }\r\n","import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { DefaultService } from \"../defaultService\";\r\nimport { ApiResponse } from \"../../models/apiResponse\"\r\nimport { Observable } from 'rxjs';\r\nimport { SampleModel } from '../../models/response/sampleModel';\r\nimport { SearchSample } from \"../../models/request/searchSample\";\r\nimport { BloodTestModel } from \"../../models/response/bloodTestModel\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class BloodTestService extends DefaultService {\r\n\r\n    constructor(private http: HttpClient) {\r\n     super('bloodtest/')\r\n    }\r\n\r\n    private httpOptions ={\r\n      headers: new HttpHeaders({\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Basic bmFudTpuYW51'\r\n      })\r\n    };\r\n\r\n\r\n    findById(id: String): Observable<ApiResponse<BloodTestModel>> {\r\n      return this.http.get<ApiResponse<BloodTestModel>>(`${this.url}${id}`, this.httpOptions);\r\n    }\r\n\r\n    changeStatus(id: string): Observable<ApiResponse<BloodTestModel>> {\r\n      return this.http.put<ApiResponse<BloodTestModel>>(`${this.url}changestatus/${id}`, null, this.httpOptions);\r\n    }\r\n\r\n    findByTestNumber(searchTest: SearchSample): Observable<ApiResponse<BloodTestModel>> {\r\n      return this.http.get<ApiResponse<BloodTestModel>>(`${this.url}test/${searchTest.sampleNumber}`, this.httpOptions);\r\n    }\r\n\r\n    create(testModel:BloodTestModel,idEmp:string,idSample:string): Observable<ApiResponse<SampleModel>> {\r\n      return this.http.post<ApiResponse<SampleModel>>(`${this.url}/${idEmp}/${idSample}`, testModel, this.httpOptions);\r\n    }\r\n\r\n    /* getAll(type: string):Observable<ApiResponse<SampleModel>> {\r\n      return this.http.get<ApiResponse<SampleModel>>(`${this.url}stockType/${type}`, this.httpOptions);\r\n    } */\r\n\r\n  }\r\n","import { HttpHeaders } from \"@angular/common/http\";\r\nimport { environment } from \"../../environments/environment\";\r\n\r\n\r\n//conecao com api\r\nexport abstract class DefaultService {\r\n    protected url: string;\r\n    protected resource: string;\r\n\r\n\r\n    constructor(resource: string) {\r\n      this.url = `${environment.url}${resource}`;\r\n    }\r\n  }\r\n","import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { DefaultService } from \"../defaultService\";\r\nimport { ApiResponse } from \"../../models/apiResponse\";\r\nimport { Observable } from \"rxjs\";\r\nimport { SearchEmployee } from \"../../models/request/searchEmployee\";\r\nimport { EmployeeModel } from \"../../models/response/EmployeeModel\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class EmployeeService extends DefaultService {\r\n  constructor(private http: HttpClient) {\r\n    super(\"employee/\");\r\n  }\r\n\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Basic bmFudTpuYW51\",\r\n    }),\r\n  };\r\n\r\n  getEmployeeMultipleParams(searchEmployee: SearchEmployee): Observable<ApiResponse<EmployeeModel>> {\r\n    const headerss = new HttpHeaders().set(\"Authorization\",\"Basic bmFudTpuYW51\" );\r\n\r\n    let queryParams = new HttpParams().append(\"identifNumber\", searchEmployee.identifNumber)\r\n                                      .append(\"email\", searchEmployee.email);\r\n\r\n    let queryJustIdentifNumber = new HttpParams().append(\"identifNumber\",searchEmployee.identifNumber);\r\n\r\n    let queryJustEmail = new HttpParams().append(\"email\", searchEmployee.email);\r\n\r\n    if (searchEmployee.identifNumber != null && searchEmployee.email != null) {\r\n      const options = { params: queryParams, headers: headerss };\r\n      return this.http.get<ApiResponse<EmployeeModel>>(`${this.url}getEmplOpts`,options);\r\n    }\r\n\r\n    if (searchEmployee.identifNumber != null && searchEmployee.email == null) {\r\n      const options = { params: queryJustIdentifNumber, headers: headerss };\r\n      return this.http.get<ApiResponse<EmployeeModel>>(`${this.url}getEmplOpts`, options);\r\n    }\r\n    if (searchEmployee.identifNumber == null && searchEmployee.email != null) {\r\n      const options = { params: queryJustEmail, headers: headerss };\r\n      return this.http.get<ApiResponse<EmployeeModel>>(`${this.url}getEmplOpts`,options);\r\n    }\r\n    if (searchEmployee.identifNumber == null && searchEmployee.email == null) {\r\n      const options = { headers: headerss };\r\n      return this.http.get<ApiResponse<EmployeeModel>>(`${this.url}getEmplOpts`,options);\r\n    }\r\n  }\r\n\r\n  findById(id: String): Observable<ApiResponse<EmployeeModel>> {\r\n    return this.http.get<ApiResponse<EmployeeModel>>(`${this.url}${id}`,this.httpOptions );\r\n  }\r\n\r\n  edit(id: String,employee: EmployeeModel): Observable<ApiResponse<EmployeeModel>> {\r\n    return this.http.put<ApiResponse<EmployeeModel>>(`${this.url}${id}`,employee,this.httpOptions);\r\n  }\r\n\r\n  create(person: EmployeeModel, id:string): Observable<ApiResponse<EmployeeModel>> {\r\n    return this.http.post<ApiResponse<EmployeeModel>>(`${this.url}${id}`,person,this.httpOptions);\r\n  }\r\n\r\n\r\n  changeStatus(id: string): Observable<ApiResponse<EmployeeModel>> {\r\n    return this.http.put<ApiResponse<EmployeeModel>>(`${this.url}changestatus/${id}`, null, this.httpOptions);\r\n  }\r\n\r\n\r\n\r\n  /*\r\n    delete(id: string): Observable<ResponseApp<Employee>> {\r\n      return this.http.delete<ResponseApp<Employee>>(`${this.url}/${id}`);\r\n    }*/\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { DefaultService } from \"../defaultService\";\r\nimport { ApiResponse } from \"../../models/apiResponse\";\r\nimport { SearchPerson } from \"../../models/request/searchPerson\";\r\nimport { Observable } from \"rxjs\";\r\nimport { PersonModel } from \"../../models/response/personModel\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class PersonService extends DefaultService {\r\n\r\n    constructor(private http: HttpClient) {\r\n     super('person/')\r\n    }\r\n\r\n    private httpOptions ={\r\n      headers: new HttpHeaders({\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Basic bmFudTpuYW51'\r\n      })\r\n    };\r\n\r\n    getPersonMultipleParams(searchPerson: SearchPerson ):Observable<ApiResponse<PersonModel>> {\r\n\r\n      const headerss = new HttpHeaders().set('Authorization','Basic bmFudTpuYW51');\r\n\r\n      let queryParams = new HttpParams().append(\"namePerson\",searchPerson.namePerson)\r\n                                        .append(\"surnamePerson\",searchPerson.surnamePerson)\r\n                                        .append(\"birthday\",searchPerson.birthday)\r\n\r\n      let queryJustName = new HttpParams().append(\"namePerson\",searchPerson.namePerson)\r\n      let queryJustSurname = new HttpParams().append(\"surnamePerson\",searchPerson.surnamePerson)\r\n      let queryJustBirthDay = new HttpParams().append(\"birthday\",searchPerson.birthday)\r\n\r\n\r\n\r\n         if(searchPerson.namePerson!=null && searchPerson.surnamePerson !=null && searchPerson.birthday !=null){\r\n           const options = {  params: queryParams, headers: headerss }\r\n           return this.http.get<ApiResponse<PersonModel>>(`${this.url}getPersonOpts`, options);\r\n         }\r\n\r\n        if(searchPerson.namePerson!=null && searchPerson.surnamePerson ==null  && searchPerson.birthday ==null){\r\n          const options = {  params: queryJustName, headers: headerss }\r\n          return this.http.get<ApiResponse<PersonModel>>(`${this.url}getPersonOpts`, options);\r\n        }\r\n        if(searchPerson.namePerson==null && searchPerson.surnamePerson != null  && searchPerson.birthday ==null){\r\n          const options = {  params: queryJustSurname, headers: headerss }\r\n          return this.http.get<ApiResponse<PersonModel>>(`${this.url}getPersonOpts`, options);\r\n        }\r\n        if(searchPerson.namePerson==null && searchPerson.surnamePerson == null  && searchPerson.birthday !=null){\r\n          const options = {  params: queryJustBirthDay, headers: headerss }\r\n          return this.http.get<ApiResponse<PersonModel>>(`${this.url}getPersonOpts`, options);\r\n        }\r\n        if(searchPerson.namePerson==null && searchPerson.surnamePerson == null ){\r\n          const options = {headers: headerss }\r\n          return this.http.get<ApiResponse<PersonModel>>(`${this.url}getPersonOpts`, options);\r\n        }\r\n    }\r\n\r\n    getByOne(value: string): Observable<ApiResponse<PersonModel>>{\r\n      const headerss = new HttpHeaders().set('Authorization','Basic bmFudTpuYW51');\r\n\r\n      let queryParams = new HttpParams().append(\"value\",value);\r\n      const options = {  params: queryParams, headers: headerss }\r\n\r\n      return this.http.get<ApiResponse<PersonModel>>(`${this.url}getPersonByOne`, options);\r\n    }\r\n\r\n\r\n    findById(id: String): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.get<ApiResponse<PersonModel>>(`${this.url}${id}`, this.httpOptions);\r\n    }\r\n\r\n    edit(id: String,person: PersonModel): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.put<ApiResponse<PersonModel>>(`${this.url}${id}`, person, this.httpOptions);\r\n    }\r\n\r\n    create(person: PersonModel): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.post<ApiResponse<PersonModel>>(`${this.url}`, person, this.httpOptions);\r\n    }\r\n\r\n    changeStatus(id: string): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.put<ApiResponse<PersonModel>>(`${this.url}changestatus/${id}`, null, this.httpOptions);\r\n    }\r\n\r\n\r\n    /*getPerson(searchPerson: SearchPerson ):Observable<ApiResponse<PersonModel>> {\r\n      return this.http.get<ApiResponse<PersonModel>>(`${this.url}/${searchPerson.namePerson}\r\n                                                                 /${searchPerson.surnamePerson}`, this.httpOptions);\r\n    }*/\r\n\r\n\r\n\r\n  }\r\n","import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { DefaultService } from \"../defaultService\";\r\nimport { ApiResponse } from \"../../models/apiResponse\"\r\nimport { Observable } from 'rxjs';\r\nimport { SampleModel } from '../../models/response/sampleModel';\r\nimport { SearchSample } from \"../../models/request/searchSample\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class SampleService extends DefaultService {\r\n\r\n    constructor(private http: HttpClient) {\r\n     super('sample/')\r\n    }\r\n\r\n    private httpOptions ={\r\n      headers: new HttpHeaders({\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Basic bmFudTpuYW51'\r\n      })\r\n    };\r\n\r\n\r\n    findById(id: String): Observable<ApiResponse<SampleModel>> {\r\n      return this.http.get<ApiResponse<SampleModel>>(`${this.url}${id}`, this.httpOptions);\r\n    }\r\n\r\n    changeStatus(id: string): Observable<ApiResponse<SampleModel>> {\r\n      return this.http.put<ApiResponse<SampleModel>>(`${this.url}changestatus/${id}`, null, this.httpOptions);\r\n    }\r\n\r\n    findBySampleNumber(searchSample: SearchSample): Observable<ApiResponse<SampleModel>> {\r\n      return this.http.get<ApiResponse<SampleModel>>(`${this.url}getsample/${searchSample.sampleNumber}`, this.httpOptions);\r\n    }\r\n\r\n    create(sample:SampleModel,idCollect:string,idEmp:string): Observable<ApiResponse<SampleModel>> {\r\n      return this.http.post<ApiResponse<SampleModel>>(`${this.url}${idCollect}/${idEmp}`, sample, this.httpOptions);\r\n    }\r\n\r\n    getAll(type: string):Observable<ApiResponse<SampleModel>> {\r\n      return this.http.get<ApiResponse<SampleModel>>(`${this.url}stockType/${type}`, this.httpOptions);\r\n    }\r\n\r\n  }\r\n"]}