{"version":3,"file":"src_app_pages_bloodtype_bloodtype_module_ts-es2015.js","mappings":"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","sources":["./src/app/pages/bloodtype/bloodtype-routing.module.ts","./src/app/pages/bloodtype/bloodtype.component.ts","./src/app/pages/bloodtype/bloodtype.component.html","./src/app/pages/bloodtype/bloodtype.module.ts","./src/app/service/domain/domainService.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BloodtypeComponent } from './bloodtype.component';\r\n\r\n\r\n\r\n\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: BloodtypeComponent,\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class BloodtypeRoutingModule { }\r\n\r\nexport const routedComponents = [\r\n  BloodtypeComponent,\r\n];\r\n","import { DomainModel } from \"./../../models/response/domainModel\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\r\nimport { LocalDataSource } from \"ng2-smart-table\";\r\nimport { DomainService } from \"../../service/domain/domainService\";\r\n\r\n@Component({\r\n  selector: \"ngx-person\",\r\n  templateUrl: \"./bloodtype.component.html\",\r\n  styleUrls: [\"./bloodtype.component.scss\"],\r\n})\r\nexport class BloodtypeComponent implements OnInit {\r\n  source: LocalDataSource = new LocalDataSource();\r\n  loadingList: boolean = false;\r\n  searchForm: FormGroup;\r\n  domainName: any;\r\n  domainSelfId: DomainModel[];\r\n\r\n  constructor(\r\n    private domainService: DomainService,\r\n    private formBuilder: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getBySelfId();\r\n    this.loadForms();\r\n  }\r\n\r\n  loadForms() {\r\n    this.searchForm = this.formBuilder.group({\r\n      search: this.formBuilder.group({\r\n        domain: [\"\"],\r\n      }),\r\n    });\r\n  }\r\n\r\n  convertFormToModel() {\r\n    var viewModelObject = <DomainModel>{\r\n      domain: this.searchGroup.get(\"domain\").value,\r\n    };\r\n    return viewModelObject;\r\n  }\r\n\r\n  clearSearchForm() {}\r\n\r\n  public get searchGroup(): FormGroup {\r\n    return this.searchForm.get(\"search\") as FormGroup;\r\n  }\r\n  /////    SMART TABLE     //////////\r\n\r\n  settings = {\r\n    noDataMessage: \"Sem Dados\",\r\n    //mode: 'external',\r\n    //actions: { columnTitle: 'Ações', add: true },\r\n    add: {\r\n      addButtonContent: '<i class=\"nb-plus\"></i>',\r\n      createButtonContent: '<i class=\"nb-checkmark\"></i>',\r\n      cancelButtonContent: '<i class=\"nb-close\"></i>',\r\n      confirmCreate: true,\r\n    },\r\n    edit: {\r\n      editButtonContent: '<i class=\"nb-edit\"></i>',\r\n      saveButtonContent: '<i class=\"nb-checkmark\"></i>',\r\n      cancelButtonContent: '<i class=\"nb-close\"></i>',\r\n      confirmSave: true,\r\n    },\r\n    delete: {\r\n      deleteButtonContent: '<i class=\"nb-trash\"></i>',\r\n      confirmDelete: true,\r\n    },\r\n    columns: {\r\n      domain: { title: \"Dominio\",type: \"string\",\r\n                /* editor: {\r\n                  type: \"list\",\r\n                  config: { list: [] },\r\n                }, */\r\n      },\r\n      dmName: {title: \"Descrição\", type: \"string\",},\r\n      dmCode: {title: \"Cod.\",type: \"string\",},\r\n    },\r\n  };\r\n  /******** GET  *************** */\r\n  private getBySelfId() {\r\n    this.domainService.getBySelfId(\"\").subscribe((data) => {\r\n      this.domainSelfId = data.details;\r\n      /* for (const i of this.domainSelfId) {\r\n        this.settings.columns.domain.editor.config.list.push({\r\n          value: i.domain,\r\n          title: i.domain,\r\n        });\r\n        this.settings = Object.assign({}, this.settings);\r\n      } */\r\n    });\r\n  }\r\n\r\n  onSearchFormSubmit() {\r\n    this.loadingList = true;\r\n    this.domainService\r\n      .getByDomain(this.convertFormToModel())\r\n      .subscribe((data: any) => {\r\n        this.source.load(data.details);\r\n      });\r\n    this.loadingList = false;\r\n  }\r\n\r\n  private getDomain() {\r\n    this.domainService.get().subscribe((data) => {\r\n      this.domainName = data.details;\r\n      this.source.load(data.details);\r\n    });\r\n  }\r\n\r\n  /******** ADD  *************** */\r\n  onAdd(event) {\r\n    const domain = <DomainModel>{\r\n      domain: event.newData.domain,\r\n      dmName: event.newData.dmName,\r\n      dmCode: event.newData.dmCode,\r\n      dmOrder:event.newData.dmOrder,\r\n      selfId: event.newData.selfId,\r\n    };\r\n\r\n    this.domainService.create(domain).subscribe(\r\n      (data) => {\r\n      this.domainService\r\n        .getByDomain(event.newData.domain)\r\n        .subscribe((data: any) => {\r\n          this.source.load(data.details);\r\n        });\r\n        event.confirm.resolve();\r\n    });\r\n  }\r\n\r\n  /************** Edit ***********/\r\n\r\n  onEdit(event) {\r\n    const domain = <DomainModel>{\r\n      domain: event.newData.domain,\r\n      dmName: event.newData.dmName,\r\n      dmCode: event.newData.dmCode,\r\n      dmOrder:event.newData.dmOrder,\r\n      selfId: event.newData.selfId,\r\n    };\r\n\r\n    this.domainService.edit(event.newData.idDomain, domain).subscribe(\r\n      (data)=>{\r\n        event.confirm.resolve();\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  onDelete(event) {}\r\n}\r\n","<nb-card>\r\n  <form [formGroup]=\"searchForm\" (ngSubmit)=\"onSearchFormSubmit()\">\r\n    <nb-card formGroupName=\"search\" nbSpinnerStatus=\"info\" nbSpinnerSize=\"small\" accent=\"primary\">\r\n      <nb-card-header>Pesquisa:</nb-card-header>\r\n      <nb-card-body>\r\n        <div class=\"row\">\r\n          <div class=\"col-sm-4\">\r\n            <div class=\"form-group\">\r\n              <label for=\"domain\">Domínio</label>\r\n              <select class=\"form-control\" formControlName=\"domain\">\r\n                <option *ngFor=\"let item of domainSelfId\">\r\n                {{ item.domain }}\r\n                </option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nb-card-body>\r\n      <nb-card-footer>\r\n        <button nbButton size=\"small\" status=\"danger\" type=\"button\" class=\"mt-3 mr-2\"\r\n          (click)=\"clearSearchForm()\">Limpar</button>\r\n        <button nbButton size=\"small\" status=\"primary\" type=\"submit\" class=\"mt-3 mr-2\"\r\n          (click)=\"onSearchFormSubmit()\">Pesquisar</button>\r\n      </nb-card-footer>\r\n    </nb-card>\r\n  </form>\r\n\r\n</nb-card>\r\n\r\n\r\n<nb-card accent=\"primary\" [nbSpinner]=\"loadingList\">\r\n  <nb-card-body>\r\n    <ng2-smart-table\r\n    [settings]=\"settings\"\r\n    [source]=\"source\"\r\n    (createConfirm)=\"onAdd($event)\"\r\n    (editConfirm)=\"onEdit($event)\"\r\n    (deleteConfirm)=\"onDelete($event)\">\r\n    </ng2-smart-table>\r\n  </nb-card-body>\r\n  <nb-card-footer></nb-card-footer>\r\n</nb-card>\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NbButtonModule, NbCardModule, NbSpinnerModule} from '@nebular/theme';\r\nimport { Ng2SmartTableModule } from 'ng2-smart-table';\r\nimport { ThemeModule } from '../../@theme/theme.module';\r\nimport { EmployeeService } from '../../service/employee/employeeService';\r\nimport { BloodtypeRoutingModule, routedComponents } from './bloodtype-routing.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NbCardModule,\r\n    NbButtonModule,\r\n    ThemeModule,\r\n    Ng2SmartTableModule,\r\n    BloodtypeRoutingModule,\r\n    NbSpinnerModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n  ],\r\n  declarations: [\r\n    ...routedComponents,\r\n  ],\r\n  exports: [],\r\n  entryComponents:[],\r\n  providers: [EmployeeService],\r\n})\r\nexport class BloodtypeModule { }\r\n","import { DomainModel } from './../../models/response/domainModel';\r\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { DefaultService } from \"../defaultService\";\r\nimport { ApiResponse } from \"../../models/apiResponse\";\r\nimport { SearchPerson } from \"../../models/request/searchPerson\";\r\nimport { Observable } from \"rxjs\";\r\nimport { PersonModel } from \"../../models/response/personModel\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class DomainService extends DefaultService {\r\n\r\n    constructor(private http: HttpClient) {\r\n     super('domain/')\r\n    }\r\n\r\n    private httpOptions ={\r\n      headers: new HttpHeaders({\r\n        'Content-Type':'application/json',\r\n        'Authorization':'Basic bmFudTpuYW51'\r\n      })\r\n    };\r\n\r\n    get():Observable<ApiResponse<DomainModel>> {\r\n      return this.http.get<ApiResponse<DomainModel>>(`${this.url}`, this.httpOptions);\r\n    }\r\n\r\n    getByDomain(dModel:DomainModel):Observable<ApiResponse<DomainModel>> {\r\n      const headers = new HttpHeaders().set('Authorization','Basic bmFudTpuYW51');\r\n      let queryDomain = new HttpParams().append(\"domain\",dModel.domain)\r\n      const options = {  params: queryDomain, headers: headers }\r\n      return this.http.get<ApiResponse<DomainModel>>(`${this.url}getByDomain`, options);\r\n    }\r\n\r\n    getBySelfId(selfId:string):Observable<ApiResponse<DomainModel>> {\r\n      const headers = new HttpHeaders().set('Authorization','Basic bmFudTpuYW51');\r\n      let querySelfId = new HttpParams().append(\"selfId\",selfId)\r\n      const options = {  params: querySelfId, headers: headers }\r\n      return this.http.get<ApiResponse<DomainModel>>(`${this.url}getBySelfId`, options);\r\n    }\r\n\r\n    create(domain: DomainModel): Observable<ApiResponse<DomainModel>> {\r\n      return this.http.post<ApiResponse<DomainModel>>(`${this.url}`,domain, this.httpOptions);\r\n    }\r\n\r\n    delete(id: string): Observable<ApiResponse<DomainModel>> {\r\n      return this.http.delete<ApiResponse<DomainModel>>(`${this.url}/${id}`);\r\n    }\r\n\r\n    edit(id: String,domain: DomainModel): Observable<ApiResponse<DomainModel>> {\r\n      return this.http.put<ApiResponse<DomainModel>>(`${this.url}${id}`, domain, this.httpOptions);\r\n    }\r\n\r\n\r\n   /* findById(id: String): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.get<ApiResponse<PersonModel>>(`${this.url}${id}`, this.httpOptions);\r\n    }\r\n\r\n    edit(id: String,person: PersonModel): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.put<ApiResponse<PersonModel>>(`${this.url}${id}`, person, this.httpOptions);\r\n    }\r\n\r\n    /* edit(person: PersonModel): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.put<ApiResponse<PersonModel>>(`${this.url}${person.id}`, person, this.httpOptions);\r\n    }\r\n\r\n    create(person: PersonModel): Observable<ApiResponse<PersonModel>> {\r\n      return this.http.post<ApiResponse<PersonModel>>(`${this.url}`, person, this.httpOptions);\r\n    }\r\n\r\n\r\n    delete(id: string): Observable<ResponseApp<Employee>> {\r\n      return this.http.delete<ResponseApp<Employee>>(`${this.url}/${id}`);\r\n    }*/\r\n\r\n  }\r\n"],"names":[],"sourceRoot":"webpack:///"}